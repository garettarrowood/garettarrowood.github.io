---
layout: main
title: Using Class Attributes to Get Gid of Your Database
---

h1. Using Class Attributes

p. I recently created a Vocabulary Formatting Rails app for my wife to use at work. I tried to create the program as quickly as possible, and by habit I set up a database using ActiveRecord. Once I was done, my Formatter class model looked like this:

bc.. class Formatter < ActiveRecord::Base

  def arrayed
    content.split(/\r\n/)
  end

  def randomize
    arrayed.shuffle
  end

  def alphabetize
    arrayed.sort
  end

  def numberize(array)
    i=0
    array.collect do |word|
      i += 1
      "#{i}. #{word}"
    end
  end

  def format
    if order == "random" && numbered == true
      return numberize(randomize)
    elsif order == "random" && numbered == false
      return randomize
    elsif order == "alpha" && numbered == true
      return numberize(alphabetize)
    elsif order == "alpha" && numbered == false
      return alphabetize
    else
      return ["You did not pick a format. Please select Random or Alphabetize."]
    end
  end

end

p. After I got the app running, I realized I only needed one model & view for the program to do everything it needed. And no input ever needed to be saved for future use. Thus making it apparent that I should get rid of my database. But how could I persist the form data back to display in the main view?

Enter Class Attributes.

Instead of saving attributes in a new instance of the Formatter class, I could use class variables.

This decision lead me to discover a new but familiar looking method called @cattr_accessor@. Like @attr_accessor@, this method enables readable and writable functionality. However, it operates on class variables instead of instance variables. Pretty simple.

With this power enabled, I could rewrite my Formatter class to operate only on the class itself. No more database, and no more inheritence from ActiveRecord::Base required. To get all my previous methods to work, I also had to add "self" to each operation. The finished model looks like this:

bc.. class Formatter

  cattr_accessor :content, :numbered, :order

  def self.arrayed
    @@content.split(/\r\n/)
  end

  def self.randomize
    arrayed.shuffle
  end

  def self.alphabetize
    arrayed.sort
  end

  def self.numberize(array)
    i=0
    array.collect do |word|
      i += 1
      "#{i}. #{word}"
    end
  end

  def self.format
    if @@order == "random" && @@numbered
      return self.numberize(self.randomize)
    elsif @@order == "random" && !@@numbered
      return self.randomize
    elsif @@order == "alpha" && @@numbered
      return self.numberize(self.alphabetize)
    elsif @@order == "alpha" && !@@numbered
      return self.alphabetize
    else
      return ["You did not pick a format. Please select Random or Alphabetize."]
    end
  end

end

p. It should be noted that Class variables are generally avoided in the Ruby community, as they can really mess up redefining variables and inheritence (read about that "here":http://archive.oreilly.com/pub/post/nubygems_dont_use_class_variab_1.html ). But for a program this small, they work perfectly.

The finished app: "VocabLister":https://vocabformatter.herokuapp.com/
---
layout: main
title: Using Class Attributes to Get Gid of Your Database
---

h1. Using Class Attributes

p. I recently created a Vocabulary Formatting Rails app for my wife to use at work. I tried to create the program as quickly as possible, and by habit I set up a database using ActiveRecord. Once I was done, my Formatter class model looked like this:

bc.. class Formatter < ActiveRecord::Base

  def arrayed
    content.split(/\r\n/)
  end

  def randomize
    arrayed.shuffle
  end

  def alphabetize
    arrayed.sort
  end

  def numberize(array)
    i=0
    array.collect do |word|
      i += 1
      "#{i}. #{word}"
    end
  end

  def format
    if order == "random" && numbered == true
      return numberize(randomize)
    elsif order == "random" && numbered == false
      return randomize
    elsif order == "alpha" && numbered == true
      return numberize(alphabetize)
    elsif order == "alpha" && numbered == false
      return alphabetize
    else
      return ["You did not pick a format. Please select Random or Alhabetize."]
    end
  end

end

p. After I got the app running, I realized I only needed one model & view for the program to do everything it needed. And no input ever needed to be saved for future use. Thus making it apparent that I should get rid of my database. But how could I persist the form data back to display in the main view?

Enter Class Attributes.

Instead of saving the attributes in a new instance of the Formatter class, I could use class variables that get redefined everytime the POST data was sent threw the form.

This decision lead me to discover a new but familiar looking method @cattr_accessor@.





